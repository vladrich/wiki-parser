/* Generated By:JJTree&JavaCC: Do not edit this line. WikiParser.java */
package org.wyona.wiki;

import java.util.Iterator;
import java.util.Set;

/**
*
*
*/
public class WikiParser/*@bgen(jjtree)*/implements WikiParserTreeConstants, WikiParserConstants {/*@bgen(jjtree)*/
  protected static JJTWikiParserState jjtree = new JJTWikiParserState();
        // needed for XML Header
        static boolean show = true;
        /**
	*
	*/
    public static void main(String args[]) {

        System.out.println("Enter Wiki-Markup:");

        WikiParser t = new WikiParser(System.in);
        try {
            SimpleNode n = t.WikiBody();
            //n.dump("");            
                        debugNodeTree(n, 0);
        } catch (Exception e) {
            System.out.println("Oops.");
            System.out.println(e.getMessage());
            e.printStackTrace();
        }
    }

    /**
    * 	This method will output the node tree to the console.
    */
    public static void debugNodeTree(SimpleNode node, int depth) {
                SimpleNode n = node;
                for (int i=0; i<depth; i++)
                        System.out.print(" ");
                        System.out.print(n.toString());
                if (!node.optionMap.isEmpty()) {
            Set keySet = node.optionMap.keySet();
            Iterator kit = keySet.iterator();
            while (kit.hasNext()) {
                Object option = kit.next();
                Object value = node.optionMap.get(option);
                System.out.print(":" + option.toString() + "=" + value.toString());
            }
        }
        System.out.println();
        if (n.jjtGetNumChildren() > 0) {
            for (int i = 0; i < n.jjtGetNumChildren(); i++) {
                debugNodeTree((SimpleNode)node.jjtGetChild(i), depth + 1);
            }
        }
    }

    /**
    * This method generates XML output.
    */
    public static void traverseXML(SimpleNode node, int depth) {


        SimpleNode n = node;

                // display once header!
                if (show) {
                        System.out.println("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
                        show = false;
                }


        for (int i=0; i<depth; i++)
                        System.out.print(" ");

                        if (n.jjtGetNumChildren() > 0) {
                        System.out.print("<" + n.toString() + ">");
                        }
                        else {
                                System.out.print("<" + n.toString() + " value = ");
                        }

                        if (!node.optionMap.isEmpty()) {
            Set keySet = node.optionMap.keySet();
            Iterator kit = keySet.iterator();
                while (kit.hasNext()) {
                        Object option = kit.next();
                        Object value = node.optionMap.get(option);
                        System.out.print("\"" + value.toString()+ "\"" + "/>");
                }
                }

                System.out.println();
        if (n.jjtGetNumChildren() > 0) {

            for (int i = 0; i < n.jjtGetNumChildren(); i++) {
                traverseXML((SimpleNode)node.jjtGetChild(i), depth + 1);
            }
                for (int i=0; i<depth; i++)
                        System.out.print(" ");

                        System.out.print("</" + n.toString() + ">" +"\n");
        }
    }

/** Actions */
  static final public SimpleNode WikiBody() throws ParseException {
                         /*@bgen(jjtree) WikiBody */
  SimpleNode jjtn000 = new SimpleNode(JJTWIKIBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOLD:
        case ITALIC:
        case UNDERLINE:
        case NOTAGS_EOL:
        case NOTAGS_BOLD:
        case NOTAGS_ITALIC:
        case NOTAGS_UNDERLINE:
        case NOTAGS_FORCE_NEWLINE:
        case NOTAGS_ANY_CHAR:
        case HRULE:
        case TABLE:
        case TABLE_TABLE:
        case TABLE_BOLD:
        case TABLE_ITALIC:
        case TABLE_UNDERLINE:
        case TABLE_FORCE_NEWLINE:
        case TABLE_ANY_CHAR:
        case LIST:
        case LIST_BOLD:
        case LIST_ITALIC:
        case LIST_UNDERLINE:
        case LIST_FORCE_NEWLINE:
        case TITLE:
        case TITLE_BOLD:
        case TITLE_ITALIC:
        case TITLE_UNDERLINE:
        case TITLE_FORCE_NEWLINE:
        case TITLE_ANY_CHAR:
        case START_PLAIN:
        case FORCE_NEWLINE:
        case EOL:
        case ANY_CHAR:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        if (jj_2_1(2)) {
          Paragraph();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case EOL:
            jj_consume_token(EOL);
            break;
          case NOTAGS_EOL:
            jj_consume_token(NOTAGS_EOL);
            break;
          default:
            jj_la1[1] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
      jj_consume_token(0);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

/** Paragraph */
  static final public void Paragraph() throws ParseException {
                    /*@bgen(jjtree) Paragraph */
  SimpleNode jjtn000 = new SimpleNode(JJTPARAGRAPH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_2:
      while (true) {
        if (jj_2_2(10)) {
          Plain();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case NOTAGS_ANY_CHAR:
          case TABLE_ANY_CHAR:
          case TITLE_ANY_CHAR:
          case ANY_CHAR:
            Text();
            break;
          case BOLD:
          case NOTAGS_BOLD:
          case TABLE_BOLD:
          case LIST_BOLD:
          case TITLE_BOLD:
            Bold();
            break;
          case ITALIC:
          case NOTAGS_ITALIC:
          case TABLE_ITALIC:
          case LIST_ITALIC:
          case TITLE_ITALIC:
            Italic();
            break;
          case UNDERLINE:
          case NOTAGS_UNDERLINE:
          case TABLE_UNDERLINE:
          case LIST_UNDERLINE:
          case TITLE_UNDERLINE:
            Underline();
            break;
          case NOTAGS_FORCE_NEWLINE:
          case TABLE_FORCE_NEWLINE:
          case LIST_FORCE_NEWLINE:
          case TITLE_FORCE_NEWLINE:
          case FORCE_NEWLINE:
            ForceNewline();
            break;
          case TITLE:
            Title();
            break;
          case LIST:
            List();
            break;
          case HRULE:
            Hrule();
            break;
          case TABLE:
          case TABLE_TABLE:
            Table();
            break;
          default:
            jj_la1[2] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOLD:
        case ITALIC:
        case UNDERLINE:
        case NOTAGS_BOLD:
        case NOTAGS_ITALIC:
        case NOTAGS_UNDERLINE:
        case NOTAGS_FORCE_NEWLINE:
        case NOTAGS_ANY_CHAR:
        case HRULE:
        case TABLE:
        case TABLE_TABLE:
        case TABLE_BOLD:
        case TABLE_ITALIC:
        case TABLE_UNDERLINE:
        case TABLE_FORCE_NEWLINE:
        case TABLE_ANY_CHAR:
        case LIST:
        case LIST_BOLD:
        case LIST_ITALIC:
        case LIST_UNDERLINE:
        case LIST_FORCE_NEWLINE:
        case TITLE:
        case TITLE_BOLD:
        case TITLE_ITALIC:
        case TITLE_UNDERLINE:
        case TITLE_FORCE_NEWLINE:
        case TITLE_ANY_CHAR:
        case START_PLAIN:
        case FORCE_NEWLINE:
        case ANY_CHAR:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_2;
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Bold() throws ParseException {
               /*@bgen(jjtree) Bold */
  SimpleNode jjtn000 = new SimpleNode(JJTBOLD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TITLE_BOLD:
        jj_consume_token(TITLE_BOLD);
        break;
      case BOLD:
        jj_consume_token(BOLD);
        break;
      case NOTAGS_BOLD:
        jj_consume_token(NOTAGS_BOLD);
        break;
      case LIST_BOLD:
        jj_consume_token(LIST_BOLD);
        break;
      case TABLE_BOLD:
        jj_consume_token(TABLE_BOLD);
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NOTAGS_FORCE_NEWLINE:
        case NOTAGS_ANY_CHAR:
        case TABLE_FORCE_NEWLINE:
        case TABLE_ANY_CHAR:
        case LIST_FORCE_NEWLINE:
        case TITLE_FORCE_NEWLINE:
        case TITLE_ANY_CHAR:
        case FORCE_NEWLINE:
        case ANY_CHAR:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_3;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NOTAGS_ANY_CHAR:
        case TABLE_ANY_CHAR:
        case TITLE_ANY_CHAR:
        case ANY_CHAR:
          Text();
          break;
        case NOTAGS_FORCE_NEWLINE:
        case TABLE_FORCE_NEWLINE:
        case LIST_FORCE_NEWLINE:
        case TITLE_FORCE_NEWLINE:
        case FORCE_NEWLINE:
          ForceNewline();
          break;
        default:
          jj_la1[6] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ITALIC:
      case UNDERLINE:
      case NOTAGS_ITALIC:
      case NOTAGS_UNDERLINE:
      case TABLE_ITALIC:
      case TABLE_UNDERLINE:
      case LIST_ITALIC:
      case LIST_UNDERLINE:
      case TITLE_ITALIC:
      case TITLE_UNDERLINE:
        if (jj_2_3(2)) {
          Italic();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case UNDERLINE:
          case NOTAGS_UNDERLINE:
          case TABLE_UNDERLINE:
          case LIST_UNDERLINE:
          case TITLE_UNDERLINE:
            Underline();
            break;
          default:
            jj_la1[7] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NOTAGS_FORCE_NEWLINE:
        case NOTAGS_ANY_CHAR:
        case TABLE_FORCE_NEWLINE:
        case TABLE_ANY_CHAR:
        case LIST_FORCE_NEWLINE:
        case TITLE_FORCE_NEWLINE:
        case TITLE_ANY_CHAR:
        case FORCE_NEWLINE:
        case ANY_CHAR:
          ;
          break;
        default:
          jj_la1[9] = jj_gen;
          break label_4;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NOTAGS_ANY_CHAR:
        case TABLE_ANY_CHAR:
        case TITLE_ANY_CHAR:
        case ANY_CHAR:
          Text();
          break;
        case NOTAGS_FORCE_NEWLINE:
        case TABLE_FORCE_NEWLINE:
        case LIST_FORCE_NEWLINE:
        case TITLE_FORCE_NEWLINE:
        case FORCE_NEWLINE:
          ForceNewline();
          break;
        default:
          jj_la1[10] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TITLE_BOLD:
        jj_consume_token(TITLE_BOLD);
        break;
      case NOTAGS_BOLD:
        jj_consume_token(NOTAGS_BOLD);
        break;
      case LIST_BOLD:
        jj_consume_token(LIST_BOLD);
        break;
      case TABLE_BOLD:
        jj_consume_token(TABLE_BOLD);
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Italic() throws ParseException {
                 /*@bgen(jjtree) Italic */
  SimpleNode jjtn000 = new SimpleNode(JJTITALIC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TITLE_ITALIC:
        jj_consume_token(TITLE_ITALIC);
        break;
      case ITALIC:
        jj_consume_token(ITALIC);
        break;
      case NOTAGS_ITALIC:
        jj_consume_token(NOTAGS_ITALIC);
        break;
      case LIST_ITALIC:
        jj_consume_token(LIST_ITALIC);
        break;
      case TABLE_ITALIC:
        jj_consume_token(TABLE_ITALIC);
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NOTAGS_FORCE_NEWLINE:
        case NOTAGS_ANY_CHAR:
        case TABLE_FORCE_NEWLINE:
        case TABLE_ANY_CHAR:
        case LIST_FORCE_NEWLINE:
        case TITLE_FORCE_NEWLINE:
        case TITLE_ANY_CHAR:
        case FORCE_NEWLINE:
        case ANY_CHAR:
          ;
          break;
        default:
          jj_la1[13] = jj_gen;
          break label_5;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NOTAGS_ANY_CHAR:
        case TABLE_ANY_CHAR:
        case TITLE_ANY_CHAR:
        case ANY_CHAR:
          Text();
          break;
        case NOTAGS_FORCE_NEWLINE:
        case TABLE_FORCE_NEWLINE:
        case LIST_FORCE_NEWLINE:
        case TITLE_FORCE_NEWLINE:
        case FORCE_NEWLINE:
          ForceNewline();
          break;
        default:
          jj_la1[14] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOLD:
      case UNDERLINE:
      case NOTAGS_BOLD:
      case NOTAGS_UNDERLINE:
      case TABLE_BOLD:
      case TABLE_UNDERLINE:
      case LIST_BOLD:
      case LIST_UNDERLINE:
      case TITLE_BOLD:
      case TITLE_UNDERLINE:
        if (jj_2_4(2)) {
          Bold();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case UNDERLINE:
          case NOTAGS_UNDERLINE:
          case TABLE_UNDERLINE:
          case LIST_UNDERLINE:
          case TITLE_UNDERLINE:
            Underline();
            break;
          default:
            jj_la1[15] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
      default:
        jj_la1[16] = jj_gen;
        ;
      }
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NOTAGS_FORCE_NEWLINE:
        case NOTAGS_ANY_CHAR:
        case TABLE_FORCE_NEWLINE:
        case TABLE_ANY_CHAR:
        case LIST_FORCE_NEWLINE:
        case TITLE_FORCE_NEWLINE:
        case TITLE_ANY_CHAR:
        case FORCE_NEWLINE:
        case ANY_CHAR:
          ;
          break;
        default:
          jj_la1[17] = jj_gen;
          break label_6;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NOTAGS_ANY_CHAR:
        case TABLE_ANY_CHAR:
        case TITLE_ANY_CHAR:
        case ANY_CHAR:
          Text();
          break;
        case NOTAGS_FORCE_NEWLINE:
        case TABLE_FORCE_NEWLINE:
        case LIST_FORCE_NEWLINE:
        case TITLE_FORCE_NEWLINE:
        case FORCE_NEWLINE:
          ForceNewline();
          break;
        default:
          jj_la1[18] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TITLE_ITALIC:
        jj_consume_token(TITLE_ITALIC);
        break;
      case NOTAGS_ITALIC:
        jj_consume_token(NOTAGS_ITALIC);
        break;
      case LIST_ITALIC:
        jj_consume_token(LIST_ITALIC);
        break;
      case TABLE_ITALIC:
        jj_consume_token(TABLE_ITALIC);
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Underline() throws ParseException {
                    /*@bgen(jjtree) Underline */
  SimpleNode jjtn000 = new SimpleNode(JJTUNDERLINE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TITLE_UNDERLINE:
        jj_consume_token(TITLE_UNDERLINE);
        break;
      case UNDERLINE:
        jj_consume_token(UNDERLINE);
        break;
      case NOTAGS_UNDERLINE:
        jj_consume_token(NOTAGS_UNDERLINE);
        break;
      case LIST_UNDERLINE:
        jj_consume_token(LIST_UNDERLINE);
        break;
      case TABLE_UNDERLINE:
        jj_consume_token(TABLE_UNDERLINE);
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NOTAGS_FORCE_NEWLINE:
        case NOTAGS_ANY_CHAR:
        case TABLE_FORCE_NEWLINE:
        case TABLE_ANY_CHAR:
        case LIST_FORCE_NEWLINE:
        case TITLE_FORCE_NEWLINE:
        case TITLE_ANY_CHAR:
        case FORCE_NEWLINE:
        case ANY_CHAR:
          ;
          break;
        default:
          jj_la1[21] = jj_gen;
          break label_7;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NOTAGS_ANY_CHAR:
        case TABLE_ANY_CHAR:
        case TITLE_ANY_CHAR:
        case ANY_CHAR:
          Text();
          break;
        case NOTAGS_FORCE_NEWLINE:
        case TABLE_FORCE_NEWLINE:
        case LIST_FORCE_NEWLINE:
        case TITLE_FORCE_NEWLINE:
        case FORCE_NEWLINE:
          ForceNewline();
          break;
        default:
          jj_la1[22] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOLD:
      case ITALIC:
      case NOTAGS_BOLD:
      case NOTAGS_ITALIC:
      case TABLE_BOLD:
      case TABLE_ITALIC:
      case LIST_BOLD:
      case LIST_ITALIC:
      case TITLE_BOLD:
      case TITLE_ITALIC:
        if (jj_2_5(2)) {
          Italic();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case BOLD:
          case NOTAGS_BOLD:
          case TABLE_BOLD:
          case LIST_BOLD:
          case TITLE_BOLD:
            Bold();
            break;
          default:
            jj_la1[23] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
      default:
        jj_la1[24] = jj_gen;
        ;
      }
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NOTAGS_FORCE_NEWLINE:
        case NOTAGS_ANY_CHAR:
        case TABLE_FORCE_NEWLINE:
        case TABLE_ANY_CHAR:
        case LIST_FORCE_NEWLINE:
        case TITLE_FORCE_NEWLINE:
        case TITLE_ANY_CHAR:
        case FORCE_NEWLINE:
        case ANY_CHAR:
          ;
          break;
        default:
          jj_la1[25] = jj_gen;
          break label_8;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NOTAGS_ANY_CHAR:
        case TABLE_ANY_CHAR:
        case TITLE_ANY_CHAR:
        case ANY_CHAR:
          Text();
          break;
        case NOTAGS_FORCE_NEWLINE:
        case TABLE_FORCE_NEWLINE:
        case LIST_FORCE_NEWLINE:
        case TITLE_FORCE_NEWLINE:
        case FORCE_NEWLINE:
          ForceNewline();
          break;
        default:
          jj_la1[26] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TITLE_UNDERLINE:
        jj_consume_token(TITLE_UNDERLINE);
        break;
      case NOTAGS_UNDERLINE:
        jj_consume_token(NOTAGS_UNDERLINE);
        break;
      case LIST_UNDERLINE:
        jj_consume_token(LIST_UNDERLINE);
        break;
      case TABLE_UNDERLINE:
        jj_consume_token(TABLE_UNDERLINE);
        break;
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/** Table */
  static final public void Table() throws ParseException {
                /*@bgen(jjtree) Table */
  SimpleNode jjtn000 = new SimpleNode(JJTTABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_9:
      while (true) {
        TableRow();
        if (jj_2_6(2)) {
          ;
        } else {
          break label_9;
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void TableRow() throws ParseException {
                  /*@bgen(jjtree) TableRow */
  SimpleNode jjtn000 = new SimpleNode(JJTTABLEROW);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_10:
      while (true) {
        TableCol();
        if (jj_2_7(2)) {
          ;
        } else {
          break label_10;
        }
      }
      jj_consume_token(TABLE_EOL);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void TableCol() throws ParseException {
                   /*@bgen(jjtree) TableCol */
  SimpleNode jjtn000 = new SimpleNode(JJTTABLECOL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TABLE:
      case TABLE_TABLE:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TABLE:
          jj_consume_token(TABLE);
          break;
        case TABLE_TABLE:
          jj_consume_token(TABLE_TABLE);
          break;
        default:
          jj_la1[28] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[29] = jj_gen;
        ;
      }
      label_11:
      while (true) {
        if (jj_2_8(2)) {
          Text();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case BOLD:
          case NOTAGS_BOLD:
          case TABLE_BOLD:
          case LIST_BOLD:
          case TITLE_BOLD:
            Bold();
            break;
          case ITALIC:
          case NOTAGS_ITALIC:
          case TABLE_ITALIC:
          case LIST_ITALIC:
          case TITLE_ITALIC:
            Italic();
            break;
          case UNDERLINE:
          case NOTAGS_UNDERLINE:
          case TABLE_UNDERLINE:
          case LIST_UNDERLINE:
          case TITLE_UNDERLINE:
            Underline();
            break;
          default:
            jj_la1[30] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOLD:
        case ITALIC:
        case UNDERLINE:
        case NOTAGS_BOLD:
        case NOTAGS_ITALIC:
        case NOTAGS_UNDERLINE:
        case NOTAGS_ANY_CHAR:
        case TABLE_BOLD:
        case TABLE_ITALIC:
        case TABLE_UNDERLINE:
        case TABLE_ANY_CHAR:
        case LIST_BOLD:
        case LIST_ITALIC:
        case LIST_UNDERLINE:
        case TITLE_BOLD:
        case TITLE_ITALIC:
        case TITLE_UNDERLINE:
        case TITLE_ANY_CHAR:
        case ANY_CHAR:
          ;
          break;
        default:
          jj_la1[31] = jj_gen;
          break label_11;
        }
      }
      jj_consume_token(TABLE_TABLE);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/** List */
  static final public void List() throws ParseException {
 /*@bgen(jjtree) List */
        SimpleNode jjtn000 = new SimpleNode(JJTLIST);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);int listDepth = 1;
    try {
      jj_consume_token(LIST);
      if (jj_2_9(2)) {
        label_12:
        while (true) {
          jj_consume_token(LIST_LIST);
                                            listDepth += 1;
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LIST_LIST:
            ;
            break;
          default:
            jj_la1[32] = jj_gen;
            break label_12;
          }
        }
      } else {
        ;
      }
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NOTAGS_FORCE_NEWLINE:
        case NOTAGS_ANY_CHAR:
        case TABLE_FORCE_NEWLINE:
        case TABLE_ANY_CHAR:
        case LIST_FORCE_NEWLINE:
        case TITLE_FORCE_NEWLINE:
        case TITLE_ANY_CHAR:
        case FORCE_NEWLINE:
        case ANY_CHAR:
          ;
          break;
        default:
          jj_la1[33] = jj_gen;
          break label_13;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NOTAGS_ANY_CHAR:
        case TABLE_ANY_CHAR:
        case TITLE_ANY_CHAR:
        case ANY_CHAR:
          Text();
          break;
        case NOTAGS_FORCE_NEWLINE:
        case TABLE_FORCE_NEWLINE:
        case LIST_FORCE_NEWLINE:
        case TITLE_FORCE_NEWLINE:
        case FORCE_NEWLINE:
          ForceNewline();
          break;
        default:
          jj_la1[34] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOLD:
      case ITALIC:
      case UNDERLINE:
      case NOTAGS_BOLD:
      case NOTAGS_ITALIC:
      case NOTAGS_UNDERLINE:
      case TABLE_BOLD:
      case TABLE_ITALIC:
      case TABLE_UNDERLINE:
      case LIST_BOLD:
      case LIST_ITALIC:
      case LIST_UNDERLINE:
      case TITLE_BOLD:
      case TITLE_ITALIC:
      case TITLE_UNDERLINE:
        if (jj_2_10(2)) {
          Bold();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ITALIC:
          case NOTAGS_ITALIC:
          case TABLE_ITALIC:
          case LIST_ITALIC:
          case TITLE_ITALIC:
            Italic();
            break;
          case UNDERLINE:
          case NOTAGS_UNDERLINE:
          case TABLE_UNDERLINE:
          case LIST_UNDERLINE:
          case TITLE_UNDERLINE:
            Underline();
            break;
          default:
            jj_la1[35] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
      default:
        jj_la1[36] = jj_gen;
        ;
      }
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NOTAGS_FORCE_NEWLINE:
        case NOTAGS_ANY_CHAR:
        case TABLE_FORCE_NEWLINE:
        case TABLE_ANY_CHAR:
        case LIST_FORCE_NEWLINE:
        case TITLE_FORCE_NEWLINE:
        case TITLE_ANY_CHAR:
        case FORCE_NEWLINE:
        case ANY_CHAR:
          ;
          break;
        default:
          jj_la1[37] = jj_gen;
          break label_14;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NOTAGS_ANY_CHAR:
        case TABLE_ANY_CHAR:
        case TITLE_ANY_CHAR:
        case ANY_CHAR:
          Text();
          break;
        case NOTAGS_FORCE_NEWLINE:
        case TABLE_FORCE_NEWLINE:
        case LIST_FORCE_NEWLINE:
        case TITLE_FORCE_NEWLINE:
        case FORCE_NEWLINE:
          ForceNewline();
          break;
        default:
          jj_la1[38] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(LIST_EOL);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.setOption("depth", listDepth);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/** Plaintext */
  static final public void Plain() throws ParseException {
                /*@bgen(jjtree) Plain */
  SimpleNode jjtn000 = new SimpleNode(JJTPLAIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(START_PLAIN);
      label_15:
      while (true) {
        if (jj_2_11(2)) {
          ;
        } else {
          break label_15;
        }
        PlainText();
      }
      jj_consume_token(END_PLAIN);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void PlainText() throws ParseException {
                    /*@bgen(jjtree) PlainText */
  SimpleNode jjtn000 = new SimpleNode(JJTPLAINTEXT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(PLAIN_ANY_CHAR);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/** Horizontal Rule */
  static final public void Hrule() throws ParseException {
                /*@bgen(jjtree) Hrule */
  SimpleNode jjtn000 = new SimpleNode(JJTHRULE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(HRULE);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/** Title */
  static final public void Title() throws ParseException {
                /*@bgen(jjtree) Title */
  SimpleNode jjtn000 = new SimpleNode(JJTTITLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(TITLE);
      label_16:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NOTAGS_FORCE_NEWLINE:
        case NOTAGS_ANY_CHAR:
        case TABLE_FORCE_NEWLINE:
        case TABLE_ANY_CHAR:
        case LIST_FORCE_NEWLINE:
        case TITLE_FORCE_NEWLINE:
        case TITLE_ANY_CHAR:
        case FORCE_NEWLINE:
        case ANY_CHAR:
          ;
          break;
        default:
          jj_la1[39] = jj_gen;
          break label_16;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NOTAGS_ANY_CHAR:
        case TABLE_ANY_CHAR:
        case TITLE_ANY_CHAR:
        case ANY_CHAR:
          Text();
          break;
        case NOTAGS_FORCE_NEWLINE:
        case TABLE_FORCE_NEWLINE:
        case LIST_FORCE_NEWLINE:
        case TITLE_FORCE_NEWLINE:
        case FORCE_NEWLINE:
          ForceNewline();
          break;
        default:
          jj_la1[40] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOLD:
      case ITALIC:
      case UNDERLINE:
      case NOTAGS_BOLD:
      case NOTAGS_ITALIC:
      case NOTAGS_UNDERLINE:
      case TABLE_BOLD:
      case TABLE_ITALIC:
      case TABLE_UNDERLINE:
      case LIST_BOLD:
      case LIST_ITALIC:
      case LIST_UNDERLINE:
      case TITLE_BOLD:
      case TITLE_ITALIC:
      case TITLE_UNDERLINE:
        if (jj_2_12(2)) {
          Bold();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ITALIC:
          case NOTAGS_ITALIC:
          case TABLE_ITALIC:
          case LIST_ITALIC:
          case TITLE_ITALIC:
            Italic();
            break;
          case UNDERLINE:
          case NOTAGS_UNDERLINE:
          case TABLE_UNDERLINE:
          case LIST_UNDERLINE:
          case TITLE_UNDERLINE:
            Underline();
            break;
          default:
            jj_la1[41] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
      default:
        jj_la1[42] = jj_gen;
        ;
      }
      label_17:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NOTAGS_FORCE_NEWLINE:
        case NOTAGS_ANY_CHAR:
        case TABLE_FORCE_NEWLINE:
        case TABLE_ANY_CHAR:
        case LIST_FORCE_NEWLINE:
        case TITLE_FORCE_NEWLINE:
        case TITLE_ANY_CHAR:
        case FORCE_NEWLINE:
        case ANY_CHAR:
          ;
          break;
        default:
          jj_la1[43] = jj_gen;
          break label_17;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NOTAGS_ANY_CHAR:
        case TABLE_ANY_CHAR:
        case TITLE_ANY_CHAR:
        case ANY_CHAR:
          Text();
          break;
        case NOTAGS_FORCE_NEWLINE:
        case TABLE_FORCE_NEWLINE:
        case LIST_FORCE_NEWLINE:
        case TITLE_FORCE_NEWLINE:
        case FORCE_NEWLINE:
          ForceNewline();
          break;
        default:
          jj_la1[44] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(TITLE_EOL);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/** State spanning actions */
  static final public void Text() throws ParseException {
 /*@bgen(jjtree) Text */
        SimpleNode jjtn000 = new SimpleNode(JJTTEXT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOTAGS_ANY_CHAR:
        t = jj_consume_token(NOTAGS_ANY_CHAR);
                                  jjtn000.setOption("value", t.image);
        t = jj_consume_token(LIST_ANY_CHAR);
                                          jjtree.closeNodeScope(jjtn000, true);
                                          jjtc000 = false;
                                  jjtn000.setOption("value", t.image);
        break;
      case TITLE_ANY_CHAR:
        t = jj_consume_token(TITLE_ANY_CHAR);
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                               jjtn000.setOption("value", t.image);
        break;
      case TABLE_ANY_CHAR:
        t = jj_consume_token(TABLE_ANY_CHAR);
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                               jjtn000.setOption("value", t.image);
        break;
      case ANY_CHAR:
        t = jj_consume_token(ANY_CHAR);
                                          jjtree.closeNodeScope(jjtn000, true);
                                          jjtc000 = false;
                                  jjtn000.setOption("value", t.image);
        break;
      default:
        jj_la1[45] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void ForceNewline() throws ParseException {
                       /*@bgen(jjtree) ForceNewline */
  SimpleNode jjtn000 = new SimpleNode(JJTFORCENEWLINE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TITLE_FORCE_NEWLINE:
        jj_consume_token(TITLE_FORCE_NEWLINE);
        break;
      case NOTAGS_FORCE_NEWLINE:
        jj_consume_token(NOTAGS_FORCE_NEWLINE);
        break;
      case LIST_FORCE_NEWLINE:
        jj_consume_token(LIST_FORCE_NEWLINE);
        break;
      case TABLE_FORCE_NEWLINE:
        jj_consume_token(TABLE_FORCE_NEWLINE);
        break;
      case FORCE_NEWLINE:
        jj_consume_token(FORCE_NEWLINE);
        break;
      default:
        jj_la1[46] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static final private boolean jj_3R_36() {
    if (jj_scan_token(NOTAGS_ANY_CHAR)) return true;
    if (jj_scan_token(LIST_ANY_CHAR)) return true;
    return false;
  }

  static final private boolean jj_3R_55() {
    if (jj_3R_63()) return true;
    return false;
  }

  static final private boolean jj_3R_24() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) return true;
    }
    }
    }
    return false;
  }

  static final private boolean jj_3R_59() {
    if (jj_3R_21()) return true;
    return false;
  }

  static final private boolean jj_3R_82() {
    if (jj_3R_24()) return true;
    return false;
  }

  static final private boolean jj_3R_71() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_31() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_54() {
    if (jj_3R_24()) return true;
    return false;
  }

  static final private boolean jj_3R_64() {
    if (jj_scan_token(TITLE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_71()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_72()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_73()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(TITLE_EOL)) return true;
    return false;
  }

  static final private boolean jj_3_11() {
    if (jj_3R_26()) return true;
    return false;
  }

  static final private boolean jj_3R_25() {
    if (jj_scan_token(LIST_LIST)) return true;
    return false;
  }

  static final private boolean jj_3R_66() {
    if (jj_scan_token(HRULE)) return true;
    return false;
  }

  static final private boolean jj_3R_35() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) return true;
    }
    }
    }
    return false;
  }

  static final private boolean jj_3_8() {
    if (jj_3R_24()) return true;
    return false;
  }

  static final private boolean jj_3R_26() {
    if (jj_scan_token(PLAIN_ANY_CHAR)) return true;
    return false;
  }

  static final private boolean jj_3_9() {
    Token xsp;
    if (jj_3R_25()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_25()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_19() {
    if (jj_scan_token(START_PLAIN)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_11()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(END_PLAIN)) return true;
    return false;
  }

  static final private boolean jj_3R_65() {
    if (jj_scan_token(LIST)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_9()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_74()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_75()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_76()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(LIST_EOL)) return true;
    return false;
  }

  static final private boolean jj_3R_34() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(11)) {
    jj_scanpos = xsp;
    if (jj_scan_token(13)) return true;
    }
    return false;
  }

  static final private boolean jj_3R_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_34()) jj_scanpos = xsp;
    if (jj_3R_35()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_35()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(TABLE_TABLE)) return true;
    return false;
  }

  static final private boolean jj_3_7() {
    if (jj_3R_23()) return true;
    return false;
  }

  static final private boolean jj_3R_22() {
    Token xsp;
    if (jj_3_7()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_7()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3_6() {
    if (jj_3R_22()) return true;
    return false;
  }

  static final private boolean jj_3R_43() {
    if (jj_3R_62()) return true;
    return false;
  }

  static final private boolean jj_3R_67() {
    Token xsp;
    if (jj_3_6()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_6()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_62() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(31)) {
    jj_scanpos = xsp;
    if (jj_scan_token(3)) {
    jj_scanpos = xsp;
    if (jj_scan_token(7)) {
    jj_scanpos = xsp;
    if (jj_scan_token(24)) {
    jj_scanpos = xsp;
    if (jj_scan_token(16)) return true;
    }
    }
    }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_68()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_69()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_70()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(31)) {
    jj_scanpos = xsp;
    if (jj_scan_token(7)) {
    jj_scanpos = xsp;
    if (jj_scan_token(24)) {
    jj_scanpos = xsp;
    if (jj_scan_token(16)) return true;
    }
    }
    }
    return false;
  }

  static final private boolean jj_3R_42() {
    if (jj_3R_20()) return true;
    return false;
  }

  static final private boolean jj_3R_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(30)) {
    jj_scanpos = xsp;
    if (jj_scan_token(2)) {
    jj_scanpos = xsp;
    if (jj_scan_token(6)) {
    jj_scanpos = xsp;
    if (jj_scan_token(23)) {
    jj_scanpos = xsp;
    if (jj_scan_token(15)) return true;
    }
    }
    }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_28()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_29()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_30()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(30)) {
    jj_scanpos = xsp;
    if (jj_scan_token(6)) {
    jj_scanpos = xsp;
    if (jj_scan_token(23)) {
    jj_scanpos = xsp;
    if (jj_scan_token(15)) return true;
    }
    }
    }
    return false;
  }

  static final private boolean jj_3R_48() {
    if (jj_3R_67()) return true;
    return false;
  }

  static final private boolean jj_3R_47() {
    if (jj_3R_66()) return true;
    return false;
  }

  static final private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(29)) {
    jj_scanpos = xsp;
    if (jj_scan_token(1)) {
    jj_scanpos = xsp;
    if (jj_scan_token(5)) {
    jj_scanpos = xsp;
    if (jj_scan_token(22)) {
    jj_scanpos = xsp;
    if (jj_scan_token(14)) return true;
    }
    }
    }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_31()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_32()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_33()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(29)) {
    jj_scanpos = xsp;
    if (jj_scan_token(5)) {
    jj_scanpos = xsp;
    if (jj_scan_token(22)) {
    jj_scanpos = xsp;
    if (jj_scan_token(14)) return true;
    }
    }
    }
    return false;
  }

  static final private boolean jj_3R_46() {
    if (jj_3R_65()) return true;
    return false;
  }

  static final private boolean jj_3R_45() {
    if (jj_3R_64()) return true;
    return false;
  }

  static final private boolean jj_3R_44() {
    if (jj_3R_63()) return true;
    return false;
  }

  static final private boolean jj_3R_41() {
    if (jj_3R_21()) return true;
    return false;
  }

  static final private boolean jj_3R_40() {
    if (jj_3R_24()) return true;
    return false;
  }

  static final private boolean jj_3R_27() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static final private boolean jj_3_2() {
    if (jj_3R_19()) return true;
    return false;
  }

  static final private boolean jj_3R_18() {
    Token xsp;
    if (jj_3R_27()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_27()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static final private boolean jj_3R_93() {
    if (jj_3R_63()) return true;
    return false;
  }

  static final private boolean jj_3R_81() {
    if (jj_3R_63()) return true;
    return false;
  }

  static final private boolean jj_3_1() {
    if (jj_3R_18()) return true;
    return false;
  }

  static final private boolean jj_3R_92() {
    if (jj_3R_24()) return true;
    return false;
  }

  static final private boolean jj_3R_76() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_92()) {
    jj_scanpos = xsp;
    if (jj_3R_93()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_80() {
    if (jj_3R_24()) return true;
    return false;
  }

  static final private boolean jj_3R_70() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_79() {
    if (jj_3R_21()) return true;
    return false;
  }

  static final private boolean jj_3R_53() {
    if (jj_3R_63()) return true;
    return false;
  }

  static final private boolean jj_3R_91() {
    if (jj_3R_62()) return true;
    return false;
  }

  static final private boolean jj_3R_87() {
    if (jj_3R_63()) return true;
    return false;
  }

  static final private boolean jj_3R_30() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_52() {
    if (jj_3R_24()) return true;
    return false;
  }

  static final private boolean jj_3R_86() {
    if (jj_3R_24()) return true;
    return false;
  }

  static final private boolean jj_3R_73() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_90() {
    if (jj_3R_20()) return true;
    return false;
  }

  static final private boolean jj_3R_58() {
    if (jj_3R_63()) return true;
    return false;
  }

  static final private boolean jj_3R_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) return true;
    }
    return false;
  }

  static final private boolean jj_3_5() {
    if (jj_3R_20()) return true;
    return false;
  }

  static final private boolean jj_3R_51() {
    if (jj_3R_62()) return true;
    return false;
  }

  static final private boolean jj_3R_57() {
    if (jj_3R_24()) return true;
    return false;
  }

  static final private boolean jj_3R_69() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_85() {
    if (jj_3R_62()) return true;
    return false;
  }

  static final private boolean jj_3_10() {
    if (jj_3R_21()) return true;
    return false;
  }

  static final private boolean jj_3R_75() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) {
    jj_scanpos = xsp;
    if (jj_3R_91()) return true;
    }
    }
    return false;
  }

  static final private boolean jj_3R_84() {
    if (jj_3R_20()) return true;
    return false;
  }

  static final private boolean jj_3R_56() {
    if (jj_3R_62()) return true;
    return false;
  }

  static final private boolean jj_3R_78() {
    if (jj_3R_63()) return true;
    return false;
  }

  static final private boolean jj_3R_29() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) return true;
    }
    return false;
  }

  static final private boolean jj_3_4() {
    if (jj_3R_21()) return true;
    return false;
  }

  static final private boolean jj_3R_77() {
    if (jj_3R_24()) return true;
    return false;
  }

  static final private boolean jj_3R_68() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_89() {
    if (jj_3R_63()) return true;
    return false;
  }

  static final private boolean jj_3_12() {
    if (jj_3R_21()) return true;
    return false;
  }

  static final private boolean jj_3R_72() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) return true;
    }
    }
    return false;
  }

  static final private boolean jj_3R_88() {
    if (jj_3R_24()) return true;
    return false;
  }

  static final private boolean jj_3R_61() {
    if (jj_3R_62()) return true;
    return false;
  }

  static final private boolean jj_3R_74() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_32() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) return true;
    }
    return false;
  }

  static final private boolean jj_3_3() {
    if (jj_3R_20()) return true;
    return false;
  }

  static final private boolean jj_3R_50() {
    if (jj_3R_63()) return true;
    return false;
  }

  static final private boolean jj_3R_63() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(32)) {
    jj_scanpos = xsp;
    if (jj_scan_token(8)) {
    jj_scanpos = xsp;
    if (jj_scan_token(25)) {
    jj_scanpos = xsp;
    if (jj_scan_token(17)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) return true;
    }
    }
    }
    }
    return false;
  }

  static final private boolean jj_3R_28() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) return true;
    }
    return false;
  }

  static final private boolean jj_3R_49() {
    if (jj_3R_24()) return true;
    return false;
  }

  static final private boolean jj_3R_60() {
    if (jj_3R_20()) return true;
    return false;
  }

  static final private boolean jj_3R_83() {
    if (jj_3R_63()) return true;
    return false;
  }

  static final private boolean jj_3R_39() {
    if (jj_scan_token(ANY_CHAR)) return true;
    return false;
  }

  static final private boolean jj_3R_38() {
    if (jj_scan_token(TABLE_ANY_CHAR)) return true;
    return false;
  }

  static final private boolean jj_3R_37() {
    if (jj_scan_token(TITLE_ANY_CHAR)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  static public WikiParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  static public Token token, jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static public boolean lookingAhead = false;
  static private boolean jj_semLA;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[47];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_0();
      jj_la1_1();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0xebcfeffe,0x10,0xebcfefee,0xebcfefee,0x20404022,0x2060300,0x2060300,0x81010088,0xc18180cc,0x2060300,0x2060300,0x20404020,0x40808044,0x2060300,0x2060300,0x81010088,0xa14140aa,0x2060300,0x2060300,0x40808040,0x81010088,0x2060300,0x2060300,0x20404022,0x60c0c066,0x2060300,0x2060300,0x81010080,0x2800,0x2800,0xe1c1c0ee,0xe1c5c2ee,0x200000,0x2060300,0x2060300,0xc18180cc,0xe1c1c0ee,0x2060300,0x2060300,0x2060300,0x2060300,0xc18180cc,0xe1c1c0ee,0x2060300,0x2060300,0x40200,0x2020100,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x1a7,0x80,0x123,0x127,0x0,0x123,0x123,0x0,0x0,0x123,0x123,0x0,0x0,0x123,0x123,0x0,0x0,0x123,0x123,0x0,0x0,0x123,0x123,0x0,0x0,0x123,0x123,0x0,0x0,0x0,0x0,0x102,0x0,0x123,0x123,0x0,0x0,0x123,0x123,0x123,0x123,0x0,0x0,0x123,0x123,0x102,0x21,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[12];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  public WikiParser(java.io.InputStream stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new WikiParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 47; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 47; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public WikiParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new WikiParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 47; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 47; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public WikiParser(WikiParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 47; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(WikiParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 47; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  static final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.Vector jj_expentries = new java.util.Vector();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  static public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[41];
    for (int i = 0; i < 41; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 47; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 41; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  static final public void enable_tracing() {
  }

  static final public void disable_tracing() {
  }

  static final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 12; i++) {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
          }
        }
        p = p.next;
      } while (p != null);
    }
    jj_rescan = false;
  }

  static final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
