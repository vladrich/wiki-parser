/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. WikiParser.jj */
/*@egen*//**
* JavaCC Wiki grammar file
*
* Known Bugs:
* 	1) * __*__
*   2) jeah !
*	3) * __a__ ''b''
*   4) ! __a__ ''b''
*
*/

/** Tests 

__a__ ''b'' ^^c^^
__a__
''a''
^^a^^
! __a ''b'' c__ d!
* a
** a
*** a
* a 
---
  --- ! cool __ stuff ''rocks'' __
a//b//c//d//e
! __a // ''b // '' c // __ d!
Wannabe a wiki parser // must go on with that paragraph //
jeah !
|a|b|c|
|a|b|c|
|a|b|c|
|''a'' __a''a''__|a|

*/

PARSER_BEGIN(WikiParser)

package org.wyona.wiki;

import java.util.Iterator;
import java.util.Set;

/**
*
*
*/
public class WikiParser/*@bgen(jjtree)*/implements WikiParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTWikiParserState jjtree = new JJTWikiParserState();

/*@egen*/	
	
	// needed for XML Header
	static boolean show = true;
	/**
	*
	*/
    public static void main(String args[]) {

        System.out.println("Enter Wiki-Markup:");
        
        WikiParser t = new WikiParser(System.in);
        try {        	
            SimpleNode n = t.WikiBody();
            //n.dump("");            
			debugNodeTree(n, 0);            
        } catch (Exception e) {        	
            System.out.println("Oops.");
            System.out.println(e.getMessage());
            e.printStackTrace();            
        }
    } 
    
    /**
    * 	This method will output the node tree to the console.
    */
    public static void debugNodeTree(SimpleNode node, int depth) {
  		SimpleNode n = node;
  		for (int i=0; i<depth; i++) 
  			System.out.print(" ");
  			System.out.print(n.toString());
        	if (!node.optionMap.isEmpty()) {
            Set keySet = node.optionMap.keySet();
            Iterator kit = keySet.iterator();
            while (kit.hasNext()) {
                Object option = kit.next();
                Object value = node.optionMap.get(option);
                System.out.print(":" + option.toString() + "=" + value.toString());
            }
        }        
        System.out.println();
        if (n.jjtGetNumChildren() > 0) {            
            for (int i = 0; i < n.jjtGetNumChildren(); i++) {
                debugNodeTree((SimpleNode)node.jjtGetChild(i), depth + 1);
            }            
        }                
    }
    
    /**
    * This method generates XML output.
    */
    public static void traverseXML(SimpleNode node, int depth) {
    	
    	
    	SimpleNode n = node;
		
		// display once header!
		if (show) {
			System.out.println("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
			show = false;
		}
		
		
    	for (int i=0; i<depth; i++)
  			System.out.print(" ");
  			
  			if (n.jjtGetNumChildren() > 0) {
  			System.out.print("<" + n.toString() + ">");
  			}
  			else {
  				System.out.print("<" + n.toString() + " value = ");
  			}
  			
  			if (!node.optionMap.isEmpty()) {
            Set keySet = node.optionMap.keySet();
            Iterator kit = keySet.iterator();
            	while (kit.hasNext()) {
                	Object option = kit.next();
	                Object value = node.optionMap.get(option);
	                System.out.print("\"" + value.toString()+ "\"" + "/>");
    	        }
    		}
  		
  		System.out.println();
        if (n.jjtGetNumChildren() > 0) {

            for (int i = 0; i < n.jjtGetNumChildren(); i++) {
                traverseXML((SimpleNode)node.jjtGetChild(i), depth + 1);
            }         
           	for (int i=0; i<depth; i++)
  			System.out.print(" ");
  			
			System.out.print("</" + n.toString() + ">" +"\n");
        }
    }
}

PARSER_END(WikiParser)

/** Tokens */

<DEFAULT> 
TOKEN: {
	<BOLD: "__"> { System.out.println("going Notags"); } : DEFAULT_NOTAGS
}

<DEFAULT> 
TOKEN: {
	<ITALIC: "''"> { System.out.println("going Notags"); } : DEFAULT_NOTAGS
}

<DEFAULT> 
TOKEN: {
	<UNDERLINE: "^^"> { System.out.println("going Notags"); } : DEFAULT_NOTAGS
}

<DEFAULT_NOTAGS>
TOKEN: {
	<NOTAGS_EOL: "\r" | "\r\n" | "\n"> : DEFAULT
|	<NOTAGS_BOLD: <BOLD>>
|	<NOTAGS_ITALIC: <ITALIC>>
|	<NOTAGS_UNDERLINE: <UNDERLINE>>
|   <NOTAGS_FORCE_NEWLINE: <FORCE_NEWLINE>>
|	<NOTAGS_ANY_CHAR: ~[]> { System.out.println("NC");}
}

<DEFAULT>
TOKEN: {
	<HRULE: "---">	
}

<DEFAULT>
TOKEN: {
	<TABLE: "|"> {System.out.println("going Table"); } : IN_TABLE		
}

<IN_TABLE>
TOKEN: {
	<TABLE_EOL: "\r" | "\r\n" | "\n"> : DEFAULT
|	<TABLE_TABLE: "|"> { System.out.println("TT");}
|	<TABLE_BOLD: <BOLD>>
|	<TABLE_ITALIC: <ITALIC>>
|	<TABLE_UNDERLINE: <UNDERLINE>>
|   <TABLE_FORCE_NEWLINE: <FORCE_NEWLINE>>
|	<TABLE_ANY_CHAR: ~[]> { System.out.println("TAC");}
}


<DEFAULT>
TOKEN: {
	<LIST: "*">	{System.out.println("going List"); } : IN_LIST
}

<IN_LIST>
TOKEN: {
	<LIST_EOL: "\r" | "\r\n" | "\n"> : DEFAULT
|	<LIST_LIST: <LIST>>
|	<LIST_BOLD: <BOLD>>
|	<LIST_ITALIC: <ITALIC>>
|	<LIST_UNDERLINE: <UNDERLINE>>
|   <LIST_FORCE_NEWLINE: <FORCE_NEWLINE>>
|	<LIST_ANY_CHAR: ~[]> { System.out.println("LC");}
}


<DEFAULT> 
TOKEN: {
	<TITLE: "!"> { System.out.println("going Title");} : IN_TITLE
}

<IN_TITLE>
TOKEN: {
	<TITLE_EOL: "\r" | "\r\n" | "\n"> : DEFAULT
|	<TITLE_BOLD: <BOLD>>
|	<TITLE_ITALIC: <ITALIC>>
|	<TITLE_UNDERLINE: <UNDERLINE>>
|   <TITLE_FORCE_NEWLINE: <FORCE_NEWLINE>>
|	<TITLE_ANY_CHAR: ~[]> { System.out.println("TC");}
}

<DEFAULT> 
TOKEN: {
	<START_PLAIN: "{{"> : IN_PLAIN
}

<IN_PLAIN>
TOKEN: {
	<END_PLAIN: "}}"> : DEFAULT
|	<PLAIN_ANY_CHAR: ~[]>
}

<DEFAULT> 
TOKEN: {
	<FORCE_NEWLINE: "//">
}

<DEFAULT>
SKIP: {
	<TAB: "\t">	
}

<DEFAULT> 
TOKEN: {
	<EOL: "\r" | "\r\n" | "\n">
}

<DEFAULT>
TOKEN: {
	<ANY_CHAR: ~[]> { System.out.println("S:" + curLexState); }
}


/** Actions */

SimpleNode WikiBody() : {/*@bgen(jjtree) WikiBody */
  SimpleNode jjtn000 = new SimpleNode(JJTWIKIBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) WikiBody */
        try {
/*@egen*/
	(
		LOOKAHEAD(2)
		Paragraph() |
		<EOL> | 
		<NOTAGS_EOL>
	)*
	<EOF>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{ 
  		return jjtn000; 
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/** Paragraph */
 
void Paragraph() : {/*@bgen(jjtree) Paragraph */
  SimpleNode jjtn000 = new SimpleNode(JJTPARAGRAPH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Paragraph */
        try {
/*@egen*/
	(
		LOOKAHEAD(10) 
		Plain() | 
		Text() | 
		Bold() | Italic() | Underline() | 
		ForceNewline() | 
		Title() |
		List() |
		Hrule() |
		Table()
	)+/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Bold() : {/*@bgen(jjtree) Bold */
  SimpleNode jjtn000 = new SimpleNode(JJTBOLD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) Bold */
        try {
/*@egen*/
	(<TITLE_BOLD> | <BOLD> | <NOTAGS_BOLD> | <LIST_BOLD> | <TABLE_BOLD>) (Text()|ForceNewline())* [LOOKAHEAD(2) Italic()|Underline()] (Text()|ForceNewline())*  (<TITLE_BOLD> | <NOTAGS_BOLD> | <LIST_BOLD> | <TABLE_BOLD>)/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Italic() : {/*@bgen(jjtree) Italic */
  SimpleNode jjtn000 = new SimpleNode(JJTITALIC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Italic */
        try {
/*@egen*/
	(<TITLE_ITALIC> | <ITALIC> | <NOTAGS_ITALIC> | <LIST_ITALIC> | <TABLE_ITALIC>) (Text()|ForceNewline() )* [LOOKAHEAD(2) Bold()|Underline()] (Text()|ForceNewline())* (<TITLE_ITALIC> | <NOTAGS_ITALIC> | <LIST_ITALIC> | <TABLE_ITALIC>)/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
} 

void Underline() : {/*@bgen(jjtree) Underline */
  SimpleNode jjtn000 = new SimpleNode(JJTUNDERLINE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Underline */
        try {
/*@egen*/
	(<TITLE_UNDERLINE> | <UNDERLINE> | <NOTAGS_UNDERLINE> | <LIST_UNDERLINE> | <TABLE_UNDERLINE>) (Text()|ForceNewline() )* [LOOKAHEAD(2) Italic()|Bold()] (Text()|ForceNewline())* (<TITLE_UNDERLINE> | <NOTAGS_UNDERLINE> | <LIST_UNDERLINE> | <TABLE_UNDERLINE>)/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/** Table */

void Table() : {/*@bgen(jjtree) Table */
  SimpleNode jjtn000 = new SimpleNode(JJTTABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Table */
        try {
/*@egen*/
	(LOOKAHEAD(2) TableRow())+/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

void TableRow(): {/*@bgen(jjtree) TableRow */
  SimpleNode jjtn000 = new SimpleNode(JJTTABLEROW);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TableRow */
        try {
/*@egen*/
	(LOOKAHEAD(2) TableCol())+ <TABLE_EOL>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/	
}

void TableCol() : {/*@bgen(jjtree) TableCol */
  SimpleNode jjtn000 = new SimpleNode(JJTTABLECOL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TableCol */
        try {
/*@egen*/
	[<TABLE> | <TABLE_TABLE>] (LOOKAHEAD(2) Text() | Bold() | Italic() | Underline())+  (<TABLE_TABLE>)/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/	
}


/** List */

void List() : 
{/*@bgen(jjtree) List */
        SimpleNode jjtn000 = new SimpleNode(JJTLIST);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	int listDepth = 1;
}
{/*@bgen(jjtree) List */
        try {
/*@egen*/
	<LIST> [LOOKAHEAD(2) (<LIST_LIST> { listDepth += 1; })+] (Text()|ForceNewline())* [LOOKAHEAD(2) Bold()|Italic()|Underline()] (Text()|ForceNewline())* <LIST_EOL>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{ jjtn000.setOption("depth", listDepth); }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/** Plaintext */

void Plain() : {/*@bgen(jjtree) Plain */
  SimpleNode jjtn000 = new SimpleNode(JJTPLAIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Plain */
        try {
/*@egen*/
	<START_PLAIN> (LOOKAHEAD(2) PlainText())* <END_PLAIN>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/	
}

void PlainText() : {/*@bgen(jjtree) PlainText */
  SimpleNode jjtn000 = new SimpleNode(JJTPLAINTEXT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PlainText */
        try {
/*@egen*/
	<PLAIN_ANY_CHAR>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/** Horizontal Rule */

void Hrule() : {/*@bgen(jjtree) Hrule */
  SimpleNode jjtn000 = new SimpleNode(JJTHRULE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Hrule */
        try {
/*@egen*/
	<HRULE>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/	
}

/** Title */

void Title() : {/*@bgen(jjtree) Title */
  SimpleNode jjtn000 = new SimpleNode(JJTTITLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Title */
        try {
/*@egen*/
	<TITLE> (Text()|ForceNewline())* [LOOKAHEAD(2) Bold()|Italic()|Underline()] (Text()|ForceNewline())*  <TITLE_EOL>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


/** State spanning actions */

void Text() : 
{/*@bgen(jjtree) Text */
        SimpleNode jjtn000 = new SimpleNode(JJTTEXT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) Text */
        try {
/*@egen*/

	t = <NOTAGS_ANY_CHAR>	{ jjtn000.setOption("value", t.image); }
	t = <LIST_ANY_CHAR>/*@bgen(jjtree)*/
                                        {
                                          jjtree.closeNodeScope(jjtn000, true);
                                          jjtc000 = false;
                                        }
/*@egen*/		{ jjtn000.setOption("value", t.image); } | 
	t = <TITLE_ANY_CHAR>/*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                }
/*@egen*/	{ jjtn000.setOption("value", t.image); } | 
	t = <TABLE_ANY_CHAR>/*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                }
/*@egen*/	{ jjtn000.setOption("value", t.image); } |
	t = <ANY_CHAR>/*@bgen(jjtree)*/
                                        {
                                          jjtree.closeNodeScope(jjtn000, true);
                                          jjtc000 = false;
                                        }
/*@egen*/			{ jjtn000.setOption("value", t.image); }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 		

}

void ForceNewline() : {/*@bgen(jjtree) ForceNewline */
  SimpleNode jjtn000 = new SimpleNode(JJTFORCENEWLINE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ForceNewline */
        try {
/*@egen*/
	<TITLE_FORCE_NEWLINE> | 
	<NOTAGS_FORCE_NEWLINE> | 
	<LIST_FORCE_NEWLINE> |
	<TABLE_FORCE_NEWLINE> |
	<FORCE_NEWLINE>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/	
}