/**
* JavaCC Wiki grammar file
*/

options {
    UNICODE_INPUT = true; 
    STATIC = false;
}


PARSER_BEGIN(WikiParser)

package org.wyona.wiki;

import java.util.Iterator;
import java.util.Set;
import java.io.*;

public class WikiParser {    

    public static void main(String args[]) {
     
     WikiParser wikiParser = null;
     
     try {            
      
         if (args.length == 1) {
             wikiParser = new WikiParser(new WikiParserTokenManager(new SimpleCharStream(
                 new InputStreamReader(new FileInputStream(args[0]), "UTF-8")))); 
         } else {           
             wikiParser = new WikiParser(new WikiParserTokenManager(new SimpleCharStream(
                 new InputStreamReader(System.in, "UTF-8")))); 
         }        
        
         SimpleNode n = wikiParser.WikiBody();     
         debugNodeTree(n, 0);            
        
     } catch (ParseException e) {
            System.out.println(e.getMessage());
            e.printStackTrace();                   
        } catch (Exception e) {            
            e.printStackTrace();
        }
    } 
    
    /**
    *     This method will output the node tree to the console.
    */
	public static void debugNodeTree(SimpleNode node, int depth) {
        SimpleNode n = node;
        for (int i = 0; i < depth; i++)
            System.out.print(" ");
        System.out.print(n.toString());
        if (!node.optionMap.isEmpty()) {
            Set keySet = node.optionMap.keySet();
            Iterator kit = keySet.iterator();
            while (kit.hasNext()) {
                Object option = kit.next();
                Object value = node.optionMap.get(option);
                System.out.print(":" + option.toString() + "=" + value.toString());
            }
        }
        System.out.println();
        if (n.jjtGetNumChildren() > 0) {
            for (int i = 0; i < n.jjtGetNumChildren(); i++) {
                debugNodeTree((SimpleNode) node.jjtGetChild(i), depth + 1);
            }
        }
    }  
}

PARSER_END(WikiParser)

/** Tokens */

<DEFAULT> 
TOKEN: {
    <BOLD: "__"> : DEFAULT_NOTAGS
}

<DEFAULT> 
TOKEN: {
    <ITALIC: "''"> : DEFAULT_NOTAGS
}

<DEFAULT> 
TOKEN: {
    <UNDERLINE: "^^"> : DEFAULT_NOTAGS
}

<DEFAULT_NOTAGS>
TOKEN: {
    <NOTAGS_EOL: "\r" | "\r\n" | "\n"> : DEFAULT
|    <NOTAGS_BOLD: <BOLD>>
|    <NOTAGS_ITALIC: <ITALIC>>
|    <NOTAGS_UNDERLINE: <UNDERLINE>>
|   <NOTAGS_FORCE_NEWLINE: <FORCE_NEWLINE>>
|    <NOTAGS_ANY_CHAR: ~[]>
}

<DEFAULT>
TOKEN: {
    <HRULE: "----">    
}

<DEFAULT>
TOKEN: {
    <TABLE: "|"> : IN_TABLE        
}

<IN_TABLE>
TOKEN: {
    <TABLE_EOL: "\r" | "\r\n" | "\n"> : DEFAULT
|    <TABLE_TABLE: "|">
|    <TABLE_BOLD: <BOLD>>
|    <TABLE_ITALIC: <ITALIC>>
|    <TABLE_UNDERLINE: <UNDERLINE>>
|   <TABLE_FORCE_NEWLINE: <FORCE_NEWLINE>>
|    <TABLE_ANY_CHAR: ~[]> 
}

<DEFAULT>
TOKEN: {
    <BLIST: "*"> : IN_LIST
}

<DEFAULT>
TOKEN: {
    <NLIST: "#"> : IN_LIST
}

<DEFAULT>
TOKEN: {
    <EM_LAUGH: ":-)">
|    <EM_NERD: "=)">	
|    <EM_ANGRY: "%@!">
|    <EM_TUMBD: "%(">
|    <EM_TUMBU: "%)">
|    <EM_IDEA: "%!">
|    <EM_UMBR: "%()">
|    <EM_FINGC: "%X">
|    <EM_QUEST: "%?">
|    <EM_VACAT: "%*">        
}

<IN_LIST>
TOKEN: {
    <LIST_EOL: "\r" | "\r\n" | "\n"> : DEFAULT
|    <LIST_BLIST: <BLIST>>
|    <LIST_NLIST: <NLIST>>
|    <LIST_BOLD: <BOLD>>
|    <LIST_ITALIC: <ITALIC>>
|    <LIST_UNDERLINE: <UNDERLINE>>
|   <LIST_FORCE_NEWLINE: <FORCE_NEWLINE>>
|    <LIST_ANY_CHAR: ~[]>
}

<DEFAULT> 
TOKEN: {
    <TITLE: "!"> : IN_TITLE
}

<DEFAULT> 
TOKEN: {
    <MAINTITLE: "!!"> : IN_TITLE
}

<DEFAULT> 
TOKEN: {
    <MAINMAINTITLE: "!!!"> : IN_TITLE
}


<IN_TITLE>
TOKEN: {
    <TITLE_EOL: "\r" | "\r\n" | "\n"> : DEFAULT
|    <TITLE_BOLD: <BOLD>>
|    <TITLE_ITALIC: <ITALIC>>
|    <TITLE_UNDERLINE: <UNDERLINE>>
|   <TITLE_FORCE_NEWLINE: <FORCE_NEWLINE>>
|    <TITLE_ANY_CHAR: ~[]>
}

<DEFAULT> 
TOKEN: {
    <LINK: "["> : IN_LINK
}

<IN_LINK>
TOKEN: {
    <LINK_EOL: "\r" | "\r\n" | "\n"> : DEFAULT
|    <LINK_END: "]"> : DEFAULT
|    <LINK_SEPARATOR: "|">
|    <LINK_ANY_CHAR: ~[]>
}

<DEFAULT> 
TOKEN: {
    <START_PLAIN: "{{{"> : IN_PLAIN
}

<IN_PLAIN>
TOKEN: {
    <END_PLAIN: "}}}"> : DEFAULT
|    <PLAIN_ANY_CHAR: ~[]>
}

<DEFAULT> 
TOKEN: {
    <FORCE_NEWLINE: "\\\\">
}

<DEFAULT>
SKIP: {
    <TAB: "\t">    
}

<DEFAULT> 
TOKEN: {
    <EOL: "\r" | "\r\n" | "\n">
}

<DEFAULT>
TOKEN: {
    <ANY_CHAR: ~[]>
}


/** Actions */

SimpleNode WikiBody() : {}
{
    (
        LOOKAHEAD(2)
        Paragraph()     |
        <EOL>            | 
        <NOTAGS_EOL>
    )*
    <EOF>
    { return jjtThis; }
}

/** Paragraph */
 
void Paragraph() : {}
{
    (
        LOOKAHEAD(2) 
        Plain()            | 
        Text()            | 
        Bold()            | 
        Italic()        | 
        Underline()     | 
        ForceNewline()    | 
        Title()            |
        MainTitle()        |
        MainMainTitle()    |
        BList()            |
        NList()            |
        Hrule()            |
        Link()            |
        Table()            |        
        Emoticons()        
    )+
}

/** Emoticons */

void Emoticons() : {}
{
    em_laugh()			|
    em_nerd()			|
    em_angry()			|
    em_tumbu()			|
    em_tumbd()			|
    em_idea()			|
    em_umbr()			|
    em_fingc()			|
    em_quest()			|
    em_vacat()			        	
}

void em_laugh() : {} { <EM_LAUGH> }
void em_nerd() : {} { <EM_NERD> }
void em_angry() : {} { <EM_ANGRY> }
void em_tumbd() : {} { <EM_TUMBD> }
void em_tumbu() : {} { <EM_TUMBU> }
void em_idea() : {} { <EM_IDEA> }
void em_umbr() : {} { <EM_UMBR> }
void em_fingc() : {} { <EM_FINGC> }
void em_quest() : {} { <EM_QUEST> }
void em_vacat() : {} { <EM_VACAT> }


void Bold() : {} 
{
    (
        <TITLE_BOLD>    | 
        <BOLD>            | 
        <NOTAGS_BOLD>    | 
        <LIST_BOLD>        | 
        <TABLE_BOLD>
    ) 
    (
        Text() | ForceNewline() | Italic() | Underline()
    )+
    (
        <TITLE_BOLD>    | 
        <NOTAGS_BOLD>    | 
        <LIST_BOLD>        | 
        <TABLE_BOLD>
    )
}

void Italic() : {}
{
    (
        <TITLE_ITALIC>    | 
        <ITALIC>         | 
        <NOTAGS_ITALIC> | 
        <LIST_ITALIC>    | 
        <TABLE_ITALIC>
    ) 
    (
        Text() | ForceNewline() | Bold() | Underline()
    )+
    (
        <TITLE_ITALIC>    | 
        <NOTAGS_ITALIC> | 
        <LIST_ITALIC>    | 
        <TABLE_ITALIC>
    )
} 

void Underline() : {}
{
    (
        <TITLE_UNDERLINE>    | 
        <UNDERLINE>            | 
        <NOTAGS_UNDERLINE>    | 
        <LIST_UNDERLINE>    | 
        <TABLE_UNDERLINE>
    ) 
    (
        Text() | ForceNewline() | Italic()| Bold()
    )+
    (
        <TITLE_UNDERLINE>    |
        <NOTAGS_UNDERLINE>    | 
        <LIST_UNDERLINE>    | 
        <TABLE_UNDERLINE>
    )
}

/** Link */

void Link() : 
{
    Token t = null;
    String tmpStr = null;
    String textStr = "";
    String linkStr = null;
    String labelStr = null;
        
}
{
    <LINK>        
    (
        LOOKAHEAD(2)
        tmpStr = Text()
        {
            textStr += tmpStr;
        }
    )*
    [ 
        t = <LINK_SEPARATOR> 
        { 
            labelStr = textStr; 
            textStr = "";    
        }
    ]     
    {
        if (labelStr == null) {
            linkStr = textStr;                
        } else {
            linkStr = "";    
        }
    }
    (
        tmpStr = Text()
        {            
            linkStr += tmpStr;            
        }
    )*    
    {
        jjtThis.setOption("href", linkStr);
        if (labelStr != null)
            jjtThis.setOption("label", labelStr);        
    }
    <LINK_END>
}


/** Table */

void Table() : {}
{
    (
        LOOKAHEAD(2) 
        TableRow()
    )+ 
}

void TableRow(): {}
{
    (
        LOOKAHEAD(2) 
        TableCol()
    )+     
    <TABLE_TABLE> <TABLE_EOL>    
}

void TableCol() : {}
{
    (
        <TABLE> | 
        <TABLE_TABLE>
    ) 
    (
        LOOKAHEAD(2)
        Text()        | 
        Bold()        | 
        Italic()    | 
        Underline()
    )+ 
}


/** Bulleted List */

void BList() : {}
{
    (
    LOOKAHEAD(2)
    BListItem()
    )+
}

void BListItem() :
{
    int listDepth = 1;
}
{
    <BLIST> 
    [
        LOOKAHEAD(2) 
        (
            <LIST_BLIST> { listDepth += 1; }
        )+
    ] 
    (
        LOOKAHEAD(2)
        Text()            |
        ForceNewline()    | 
        Bold()            | 
        Italic()        | 
        Underline()
    )+
    <LIST_EOL>
    { jjtThis.setOption("depth", listDepth); }
}

/** Numbered List */

void NList() : {}
{
    (
    LOOKAHEAD(2)
    NListItem()
    )+
}

void NListItem() : 
{
    int listDepth = 1;
}
{
    <NLIST> 
    [
        LOOKAHEAD(2) 
        (
            <LIST_NLIST> { listDepth += 1; }
        )+
    ] 
    (
        LOOKAHEAD(2)
        Text()            |
        ForceNewline()    | 
        Bold()            | 
        Italic()        | 
        Underline()
    )+
    <LIST_EOL>
    { jjtThis.setOption("depth", listDepth); }
}

/** Plaintext */

void Plain() : {}
{
    <START_PLAIN> 
    (
        LOOKAHEAD(2) 
        PlainText()        
    )* 
    <END_PLAIN>    
}

String PlainText() : 
{
    Token t;    
}
{
    t = <PLAIN_ANY_CHAR>    { jjtThis.setOption("value", t.image); }         
    {
        return t.image;    
    }
}

/** Horizontal Rule */

void Hrule() : {}
{
    <HRULE>    
}

/** Titles (Main, MainMain and Title */

void Title() : {}
{
    <TITLE> 
    (
        LOOKAHEAD(2)
        Text()            |
        ForceNewline()    | 
        Bold()            | 
        Italic()        | 
        Underline()
    )+
    <TITLE_EOL>
}

void MainTitle() : {}
{
    <MAINTITLE> 
    (
        LOOKAHEAD(2)
        Text()            |
        ForceNewline()    | 
        Bold()            | 
        Italic()        | 
        Underline()
    )+
    <TITLE_EOL>
}

void MainMainTitle() : {}
{
    <MAINMAINTITLE> 
    (
        LOOKAHEAD(2)
        Text()            |
        ForceNewline()    | 
        Bold()            | 
        Italic()        | 
        Underline()
    )+
    <TITLE_EOL>
}


/** State spanning actions */

String Text() : 
{
    Token t;
}
{
    (
        t = <NOTAGS_ANY_CHAR>    { jjtThis.setOption("value", t.image); } |
        t = <LIST_ANY_CHAR>        { jjtThis.setOption("value", t.image); } | 
        t = <TITLE_ANY_CHAR>    { jjtThis.setOption("value", t.image); } | 
        t = <TABLE_ANY_CHAR>    { jjtThis.setOption("value", t.image); } |
        t = <LINK_ANY_CHAR>        { jjtThis.setOption("value", t.image); } |    
        t = <ANY_CHAR>            { jjtThis.setOption("value", t.image); }         
    )
    { 
        return t.image; 
    }
}

void ForceNewline() : {}
{
    <TITLE_FORCE_NEWLINE>    | 
    <NOTAGS_FORCE_NEWLINE>    | 
    <LIST_FORCE_NEWLINE>    |
    <TABLE_FORCE_NEWLINE>    |
    <FORCE_NEWLINE>    
}